#!/usr/bin/env python

import os, sys
import numpy as np
import util.stropr as so
import cheminfo.core as cc
import cheminfo.molecule.core as cmc

dic = {'T':True, 'F':False}

args = sys.argv[1:]
cnt = 0

keys = ['-m','-meth']; hask,meth,cnt = so.parser(args,keys,'mp2',cnt)
keys = ['-b','-bst']; hask,_bst,cnt = so.parser(args,keys,'tzvp',cnt); bst = _bst.lower()
keys = ['-t','-task']; hask,_task,cnt = so.parser(args,keys,'e',cnt)
tasks = _task.split('+')



keys = ['-maxit',]; hask,maxit,cnt = so.parser(args,keys,'60',cnt)

keys = ['-n','-np','-ncpu']; hask,sn,cnt = so.parser(args,keys,'1',cnt)
keys = ['-mem',]; hask,smem,cnt = so.parser(args,keys,'1000',cnt) # 1000MB per cpu

keys = ['-calcfc',]; ifc,snic,cnt = so.parser(args,keys,'6',cnt)
keys = ['-wc', '-wcoord',]; iwc,cnt = so.haskey(args,keys,cnt)
keys = ['-grid', ]; grid,cnt = so.haskey(args,keys,cnt)
keys = ['-loose',]; loose,cnt = so.haskey(args,keys,cnt) # geometry convergence criteria
keys = ['-tight',]; tight,cnt = so.haskey(args,keys,cnt)

keys = ['-nori',]; nori,cnt = so.haskey(args,keys,cnt)

keys = ['-cp',]; icp,cnt = so.haskey(args,keys,cnt)
keys = ['-disp',]; disp,cnt = so.haskey(args,keys,cnt)

keys = ['-idf',]; idf,cnt = so.haskey(args,keys,cnt)

# common string
sc = '%%pal nprocs %s end\n%%maxcore %s\n'%(sn,smem)

if meth in ['hf-3c', 'pbeh-3c', 'hf3c', 'pbeh3c']:
    if meth[-3] != '-': meth = meth[:-2]+'-3c'
    sm = '! %s\n'%meth
    sb = ''
elif meth in ['pbe','tpss','bp86','b3lyp','wb97x']:
    sm = '! %s TIGHTSCF'%meth #
    if nori: sm += ' nori'
    if grid: sm += ' Grid5 FinalGrid6'
    sd3 = ' D3BJ\n' if disp else '\n'
    sm += sd3
    xtra = ''
    if meth in ['b3lyp','wb97x']:
        xtra = ' RIJCOSX' # for hybrid df

    if bst in ['sv(p)', 'svp', 'tzvp',]:
        sb = '! def2-%s\n' if nori else '! def2-%s def2/J%s\n'%(bst,xtra)
    elif bst in ['vdz','vtz',]:
        sb = '! cc-p%s\n'%bst if nori else '! cc-p%s def2/J%s\n'%(bst,xtra)
    else:
        sb = '! %s\n'%bst
        #raise Exception('Todo')
elif meth in ['mp2','lmp2','ccsd', 'lcc', 'ccsd(t)', 'lcc2', 'lccsd(t)',]:
    if 'cbs' in bst:
        # ['ano-cbs-ep2','ano-cbs-ep3','cc-cbs-ep2','cc-cbs-ep3', 'cbs2','cbs3']:

        df = 'RI RIJCOSX ' if idf else 'Conv '
        mb =  {'lccsd(t)': 'DLPNO-CCSD(T)', 'mp2':'MP2', 'ccsd(t)':'CCSD(T)'}[meth]
        #dctbb = {'ano-cbs':'ano', 'cc-cbs':'cc', 'cbs':'cc'}
        ssb = bst.split('-')
        nc = len(ssb)
        #if nc == 1:
        if bst == 'cbs3':
            sm = '! RHF ExtrapolateEP3(CC) TightSCF Conv'
        elif bst == 'cbs2':
            bb = 'cc'
            sm = '! %sRHF ExtrapolateEP2(2/3,%s,%s) TightSCF'%(df,bb,mb)
        elif bst == 'cbs':
            sm = '! %s%s Extrapolate(2/3) TightSCF'%(df,mb)
        else:
            raise Exception('Todo')
        #elif nc == 3:
        #    cbs_b, _, cbs_em = ssb
        #    bb = dctbb[cbs_b]
        #    sm = '! %sRHF ExtrapolateEP%s(2/3,%s,%s) TightSCF'%(df,cbs_em[-1],bb,mb)
        sm += ' nopop\n'
        sb = ''
    else:
        _sm = {'mp2': '! RI-MP2 TightSCF', \
              'lmp2': '! DLPNO-MP2 TIGHTSCF', \
              'cc': '! CCSD TIGHTSCF', \
              'cc2': '! CCSD(T) TIGHTSCF', \
              'lcc': '! DLPNO-CCSD TIGHTSCF', \
              'lcc2': '! DLPNO-CCSD(T) TIGHTSCF', \
              'lccsd(t)': '! DLPNO-CCSD(T) TIGHTSCF'}
        if meth in _sm:
            sm = _sm[meth]
        sm += ' nopop\n'
        if bst in ['tzvp',]:
            sb = '! def2-TZVP def2/J def2-TZVP/C RIJCOSX\n'
        elif bst in ['vdz', 'avdz', 'vtz','avtz']:
            bn = {'vdz':'cc-pVDZ', 'avdz':'aug-cc-pVDZ', 'vtz':'cc-pVTZ', 'avtz':'aug-cc-pVTZ'}[bst]
            sb = '! %s %s/C def2/J RIJCOSX\n'%(bn,bn) #
            #sb = '! %s %s/C def2/J\n'%(bn,bn) # 
        else:
            raise Exception('Todo')
else:
    raise Exception('Todo')

jdct0 = ['nmr', 'opt', 'copt', 'tightopt']
jdct = {'e':'', 'polar':'', 'optg':'! Opt\n', 'force': '! ENGRAD\n'}

st = ''
for task in tasks:
  if task in jdct0:
    st += '! %s\n'%task
  else:
    st += jdct[task]
  if task in ['nmr']:
    #st += ' Grid4 FinalGrid5\n'
    st += '\n%output\n Print [ P_Hirshfeld ] 1  # Hirshfeld Charge Population\nend'
  elif task in ['polar', 'alpha']:
    st += '\n\n%elprop\n Polar 1\nend'
  elif 'opt' in task.lower(): # in ['optg',]:
    st += '\n%%geom\nmaxiter %s\n'%maxit
    if ifc: st += 'calc_hess true\nrecalc_hess %s\n'%nic # calc Hess after `nic ionic cycles
    if tight: 
        st += 'TolE 1e-6\nTolRMSG 2e-4\nTolMaxG 3e-4\nTolRMSD 2e-4\nTolMaxD 3e-4\n'
    elif loose:
        #st += 'TolE 1e-4\nTolRMSG 3e-4\nTolMaxG 4.5e-4\nTolRMSD 2e-2\nTolMaxD 3e-2\n'
        st += 'TolE 1e-4\nTolRMSG 2e-3\nTolMaxG 3e-3\nTolRMSD 2e-2\nTolMaxD 3e-2\n' 
    st += 'end'
    # NormalOpt (default)  TolE=5e-6, TolRMSG=1e-4, TolMaxG=3e-4, TolRMSD=2e-3, TolMaxD=4e-3
    # TIGHTOPT             TolE=1e-6, TolRMSG=3e-5, TolMaxG=1e-4, TolRMSD=6e-4, TolMaxD=1e-3
    # GAU (G09 default)                       3e-4        4.5e-4        1.2e-3        1.8e-3
    # GAU_LOOSE                             1.7e-3        2.5e-3        6.7e-3        1.0e-2
sgeom = lambda m: '\n'.join(['{:2s}   {:9.4f} {:9.4f} {:9.4f}'.format(_,x,y,z) for _,(x,y,z) in zip(m.symbols,m.coords) ])
sgeom_cp = lambda m: '\n'.join(['{:2s} : {:9.4f} {:9.4f} {:9.4f}'.format(_,x,y,z) for _,(x,y,z) in zip(m.symbols,m.coords) ])

fs = args[cnt:]
assert fs[0]
print(' first input file: ', fs[0])
for f in fs:
    mol = cc.molecule(f)
    if mol.na == 1:
        mult = {1:2, 3:2, 4:1, 5:2, 6:3, 7:4, 8:3, 9:2, \
                11:2, 12:0, 13:2, 14:3, 15:4, 16:3, 17:2,\
                33:4, 34:3, 35:2, 53:2}[mol.zs[0]]
    else:
        mult = np.mod(np.sum(mol.zs),2)+1
    chg = 0 ###
    #print('zs=', mol.zs)
    rawm = cmc.RawMol(mol)
    mols = rawm.monomers
    n = len(mols)

    st2 = ''
    if 'nmr' in tasks:
        st2 = '\n%eprnmr\n'
        for syb in ['H','C','N']:
            if syb in mol.symbols:
                st2 += ' Nuclei = all %s { shift }\n'%syb
        st2 += 'end\n\n'

    if icp: # calculate CP-corrected energy
        assert len(tasks)==0 and (tasks[0] in ['e',])
        if n == 1:
            so = sc + sm + sb + st + '\n' 
            s = so + '* xyzfile 0 %d %s'%(mult,f)
            with open(f[:-4]+'.com', 'w') as fid: fid.write(s)
        elif n == 2:
            _sm = sm.strip() + ' PModel\n'
            so = sc + _sm + sb + st + '\n'  
            _header = '$new_job\n'

            # monomers
            s1 = ''
            #for i in  range(n):
            #    header = '' if i == 0 else _header
            #    scp = '' #'\n%id "monomer\n\n'
            #    s1 += header + so + scp + '*xyz 0 1\n' + sgeom(mols[i]) + '\n*\n\n'

            # monomer at dimer basis 
            scp = '' # '%id "monomer_2"\n'
            #s1_2 = _header + so + scp + '*xyz 0 1\n' + sgeom(mols[0]) + '\n' + sgeom_cp(mols[1]) + '\n*\n\n\n' 
            mult = np.mod(np.sum(mols[0].zs),2)+1
            s1_2 = so + scp + '*xyz 0 %d\n'%mult + sgeom(mols[0]) + '\n' + sgeom_cp(mols[1]) + '\n*\n\n\n'
            mult = np.mod(np.sum(mols[1].zs),2)+1
            s2_2 = _header + so + scp + '*xyz 0 %d\n'%mult + sgeom_cp(mols[0]) + '\n' + sgeom(mols[1]) + '\n*\n\n\n'

            # dimer
            #scp = '' # '%id "dimer"\n'
            #s2 = _header + so + scp + '*xyz 0 1\n' + sgeom(mol) + '\n*\n'

            #s = s1 + s1_2 + s2_2 + s2
            s = s1_2 + s2_2
            with open(f[:-4]+'_cp.com','w') as fid: fid.write(s)
        else:
            raise Exception('Todo')
    else:
        so = sc + sm + sb + st + '\n\n' 
        if iwc: # write coord to orca input file
            scoord = '*xyz %d %d\n'%(chg,mult)
            scoord += ''.join( ['{si} {ci[0]} {ci[1]} {ci[2]}\n'.format(si=mol.symbols[ia], ci=mol.coords[ia]) for ia in range(mol.na) ] )
            scoord += '*\n'
        else:
            scoord = '* xyzfile %d %d %s\n'%(chg,mult,f)
        s = so + scoord + '\n' + st2
        with open(f[:-4]+'.com', 'w') as fid: fid.write(s)

